package main

import (
	Aes "./AES"
	_ "encoding/binary"
)

func main(){
	//key := []byte{0x69, 0x61, 0x6D, 0x53, 0x74, 0x61, 0x65, 0x76, 0x96, 0xC6, 0xCC, 0x6C, 0x69, 0x6E, 0x67, 0x73 }
	//msg := []byte{0x79, 0x70, 0x74, 0x6F, 0x64, 0x37, 0x27, 0x7B, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x26, 0x17, 0x06, 0x87, 0x92, 0x06, 0x16, 0xE6, 0x42, 0x04, 0xE6, 0x57, 0x47, 0x76, 0xF7, 0x26 }
	//test := []byte{'a', 'b', 'c', 'd'}
	key := Aes.ReadHex("./aes_key.txt")
	msg := Aes.ReadHex("./aes_plain1.txt")
	iv := Aes.ReadHex("./aes_iv.txt")
	Aes.DumpBytes("key:", key)
	Aes.DumpBytes("plaintext:", msg)
	Aes.DumpBytes("iv:", iv)
	aes, err := Aes.NewAES(key)
	if err == nil {
		//aes.EncryptECB(msg, Aes.PaddingZeros)
		//iv = Aes.ReadHex("./aes_iv.txt")
		//aes.DecryptECB(msg)
		//
		//aes.EncryptCBC(msg, iv, Aes.PaddingZeros)
		//iv = Aes.ReadHex("./aes_iv.txt")
		//aes.DecryptCBC(msg, iv)

		//aes.EncryptCFB32(msg, iv, Aes.PaddingZeros)
		//iv = Aes.ReadHex("./aes_iv.txt")
		//aes.DecryptCFB32(msg, iv)

		//aes.EncryptOFB32(msg, iv, Aes.PaddingZeros)
		//iv = Aes.ReadHex("./aes_iv.txt")
		//aes.DecryptOFB32(msg, iv)
	}
}
